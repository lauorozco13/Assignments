
CREATE TABLE TAB_DRIVERS 
(
    ID_DRIVERS NUMBER NOT NULL,
    EMPLOYEE_NUMBER NUMBER(15) NOT NULL,
    FULLNAME VARCHAR(55) NOT NULL,
    
	CONSTRAINT PK_TAB_DRIVERS PRIMARY KEY (ID_DRIVERS)
);

CREATE SEQUENCE Tab_Drivers_Sequence START WITH 1 INCREMENT BY 1;

CREATE TRIGGER TAB_DRIVERS_Trigger BEFORE INSERT ON TAB_DRIVERS FOR EACH ROW
BEGIN
  SELECT TAB_DRIVERS_SEQUENCE.NEXTVAL 
  INTO :new.ID_DRIVERS
  FROM dual;
END;


CREATE TABLE TAB_TYPES_OF_VEHICLES
(
    ID_TYPES_OF_TAB_VEHICLES NUMBER NOT NULL,
    DESCRIPTION VARCHAR(30) NOT NULL,
	SPECIAL_QUALIFICATION VARCHAR(1) NOT NULL,
    
	CONSTRAINT PK_TAB_TYPES_OF_VEHICLES PRIMARY KEY (ID_TYPES_OF_TAB_VEHICLES),
	CONSTRAINT CK_SPECIAL_QUALIFICATION CHECK (SPECIAL_QUALIFICATION in ('S', 'N'))
);

CREATE SEQUENCE TAB_TYPES_OF_VEHICLES_Sequence START WITH 1 INCREMENT BY 1;
  
CREATE OR REPLACE TRIGGER TAB_TYPES_OF_VEHICLES_Trigger BEFORE INSERT ON TAB_TYPES_OF_VEHICLES FOR EACH ROW
BEGIN
  SELECT TAB_TYPES_OF_VEHICLES_Sequence.NEXTVAL 
  INTO :new.ID_TAB_TYPES_OF_VEHICLES
  FROM dual;
END;


CREATE TABLE TAB_VEHICLES 
(
    ID_VEHICLE NUMBER NOT NULL,
    REGISTRATION_NUMBER NUMBER(15) NOT NULL,
    PLATE VARCHAR(7) NOT NULL,
	STATUS VARCHAR(10) NOT NULL,
	MILEAGE NUMBER NOT NULL,
	MODEL NUMBER NOT NULL,
	CURRENT_VALUE NUMBER,
	REPLACEMENT_VALUE NUMBER,
	TAXED_DATE DATE,
	BOUGHT_DATE DATE,
	POLICY_NUMBER NUMBER,
	WRITTEN_OFF VARCHAR(1) NOT NULL,
	ID_TAB_TYPES_OF_VEHICLES NUMBER NOT NULL,
	CONSTRAINT PK_TAB_VEHICLES PRIMARY KEY (ID_VEHICLE),
	CONSTRAINT FK_VEHICLE_TYPE FOREIGN KEY (ID_TYPES_OF_TAB_VEHICLES) REFERENCES TAB_TYPES_OF_VEHICLES(ID_TYPES_OF_TAB_VEHICLES),
	CONSTRAINT CK_STATUS CHECK (STATUS in ('Active', 'Inactive', 'Repairing', 'Sold')),
	CONSTRAINT CK_WRITTEN_OFF CHECK (WRITTEN_OFF in ('S', 'N'))
);

CREATE SEQUENCE TAB_VEHICLES_Secuence START WITH 1 INCREMENT BY 1;
  
CREATE OR REPLACE TRIGGER TAB_VEHICLES_Trigger BEFORE INSERT ON TAB_VEHICLES FOR EACH ROW
BEGIN
  SELECT TAB_VEHICLES_Secuence.NEXTVAL 
  INTO :new.ID_VEHICLE
  FROM dual;
END;

CREATE TABLE TAB_DRIVERS_VEHICLES 
(
    ID_DRIVERS NUMBER NOT NULL,
    ID_VEHICLE NUMBER NOT NULL,
	CONSTRAINT PK_TAB_DRIVERS_VEHICLES PRIMARY KEY (ID_DRIVERS, ID_VEHICLE),
	CONSTRAINT FK_TAB_DRIVERS_VEHICLES_Driver FOREIGN KEY (ID_DRIVERS) REFERENCES TAB_VEHICLES(ID_VEHICLE),
	CONSTRAINT FK_TAB_DRIVERS_VEHICLES_Vehicle FOREIGN KEY (ID_VEHICLE) REFERENCES TAB_DRIVERS(ID_DRIVERS)
);


CREATE TABLE TAB_DRIVERS_QUALIFICATIONS 
(
    ID_DRIVERS NUMBER NOT NULL,
    TYPE_VEHICLE NUMBER NOT NULL,
	STATUS VARCHAR(15) NOT NULL,
	ASSIGNMENT_DATE DATE NOT NULL,
	CONSTRAINT PK_TAB_DRIVERS_QUALIFICATIONS PRIMARY KEY (ID_DRIVERS, TYPE_VEHICLE),
	CONSTRAINT FK_Qualification_Driver FOREIGN KEY (ID_DRIVERS) REFERENCES TAB_DRIVERS(ID_DRIVERS),
	CONSTRAINT FK_Qualification_TYPE_VEHICLE FOREIGN KEY (TYPE_VEHICLE) REFERENCES TYPE_VEHICLE(ID_TYPES_OF_TAB_VEHICLES),
	CONSTRAINT CK_status_qualification CHECK (STATUS in ('Active', 'Inactive', 'Expired', 'Disqualified'))
);

CREATE TABLE TAB_REPAIR_COSTS 
(
    ID_REPAIR_COSTS NUMBER NOT NULL,
    ID_VEHICLE NUMBER NOT NULL,
	REPAIR_DATE DATE NOT NULL,
	DESCRIPTION VARCHAR(100),
	AMOUNT NUMBER(19,4) NOT NULL,
	STATUS VARCHAR(10) NOT NULL,	
	CONSTRAINT PK_TAB_REPAIR_COSTS PRIMARY KEY (ID_REPAIR_COSTS),
	CONSTRAINT FK_Repair_Vehicle FOREIGN KEY (ID_VEHICLE) REFERENCES TAB_VEHICLES(ID_VEHICLE),
	CONSTRAINT CK_Repair_Status CHECK (STATUS in ('Pending', 'Paid'))
);

CREATE SEQUENCE TAB_REPAIR_COSTS_Sequence START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TAB_REPAIR_COSTS_Trigger BEFORE INSERT ON TAB_REPAIR_COSTS FOR EACH ROW
BEGIN
  SELECT TAB_REPAIR_COSTS_Sequence.NEXTVAL 
  INTO :new.ID_REPAIR_COSTS
  FROM dual;
END;

CREATE TABLE TAB_INSURANCE_CLAIMS 
(
    ID_INSURANCE_CLAIMS NUMBER NOT NULL,
    ID_VEHICLE NUMBER NOT NULL,
	POLICY NUMBER NOT NULL,
	LOSS_DATE DATE NOT NULL,
	ISSUE_DATE DATE NOT NULL,
	NATURE_PAYMENT VARCHAR(100),
	DAMAGES VARCHAR(500),
	CONSTRAINT PK_TAB_INSURANCE_CLAIMS PRIMARY KEY (ID_INSURANCE_CLAIMS),
	CONSTRAINT FK_Insurance_Vehicle FOREIGN KEY (ID_VEHICLE) REFERENCES TAB_VEHICLES(ID_VEHICLE)
);


CREATE SEQUENCE TAB_INSURANCE_CLAIMS_Sequence START WITH 1 INCREMENT BY 1;
  
CREATE OR REPLACE TRIGGER TAB_INSURANCE_CLAIMS_Trigger BEFORE INSERT ON TAB_INSURANCE_CLAIMS FOR EACH ROW
BEGIN
  SELECT TAB_INSURANCE_CLAIMS_Sequence.NEXTVAL 
  INTO :new.ID_INSURANCE_CLAIMS
  FROM dual;
END;


CREATE TABLE TAB_SERVICES 
(
    ID_SERVICE NUMBER NOT NULL,
    ID_VEHICLE NUMBER NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	ISSUE_DATE DATE NOT NULL,
	DESCRIPTION VARCHAR(100),
	STATUS VARCHAR(30) NOT NULL,	
	CONSTRAINT PK_TAB_SERVICES PRIMARY KEY (ID_SERVICE),
	CONSTRAINT FK_Service_Vehicle FOREIGN KEY (ID_VEHICLE) REFERENCES TAB_VEHICLES(ID_VEHICLE),
	CONSTRAINT CK_Service_Status CHECK (STATUS in ('Pending', 'Scheduled', 'Ok'))
);

CREATE SEQUENCE TAB_SERVICES_Sequence START WITH 1 INCREMENT BY 1;
  

CREATE OR REPLACE TRIGGER TAB_SERVICES_Trigger BEFORE INSERT ON TAB_SERVICES FOR EACH ROW
BEGIN
  SELECT TAB_SERVICES_Sequence.NEXTVAL 
  INTO :new.ID_SERVICE
  FROM dual;
END;


CREATE TABLE TAB_TYPES_TAB_SERVICES 
(
    ID_TYPES_TAB_SERVICES NUMBER NOT NULL,
    DESCRIPTION VARCHAR(100) NOT NULL,
	CONSTRAINT PK_TAB_TYPES_TAB_SERVICES PRIMARY KEY (ID_TYPES_TAB_SERVICES)
);

CREATE SEQUENCE TAB_TYPES_TAB_SERVICES_Sequence START WITH 1 INCREMENT BY 1;


CREATE OR REPLACE TRIGGER TAB_TYPES_TAB_SERVICES_Trigger BEFORE INSERT ON TAB_TYPES_TAB_SERVICES FOR EACH ROW
BEGIN
  SELECT TAB_TYPES_TAB_SERVICES_Sequence.NEXTVAL 
  INTO :new.ID_TYPES_TAB_SERVICES
  FROM dual;
END;

CREATE TABLE TAB_TAB_SERVICES_DETAILS 
(
    ID_TAB_SERVICES_DETAILS NUMBER NOT NULL,
    ID_SERVICE NUMBER NOT NULL,
	TYPE_SERVICE NUMBER NOT NULL,
	STATUS VARCHAR(15) NOT NULL,	
	CONSTRAINT PK_TAB_TAB_SERVICES_DETAILS PRIMARY KEY (ID_TAB_SERVICES_DETAILS),
	CONSTRAINT FK_Service FOREIGN KEY (ID_SERVICE) REFERENCES TAB_SERVICES(ID_SERVICE),
	CONSTRAINT FK_TYPE_SERVICE FOREIGN KEY (TYPE_SERVICE) REFERENCES TAB_TYPES_TAB_SERVICES(ID_TYPES_TAB_SERVICES),
	CONSTRAINT CK_STATUS CHECK (STATUS in ('Ok', 'Pending', 'Needs Repair', 'Observations'))
);
 
CREATE SEQUENCE TAB_TAB_SERVICES_DETAILS_Sequence START WITH 1 INCREMENT BY 1;
    
CREATE OR REPLACE TRIGGER TAB_TAB_SERVICES_DETAILS_Trigger BEFORE INSERT ON TAB_TAB_SERVICES_DETAILS FOR EACH ROW
BEGIN
  SELECT TAB_TAB_SERVICES_DETAILS_Sequence.NEXTVAL 
  INTO :new.ID_TAB_SERVICES_DETAILS
  FROM dual;
END;
